
/*
  Atom-terminal-panel
  Copyright by isis97
  MIT licensed

  The very basic class, which handles the configuration files, loads up commands and
  answers all the commands requests generated by terminal instance.
 */

(function() {
  var ATPCore, dirname, extname, fs, resolve, _ref;

  _ref = include('path'), resolve = _ref.resolve, dirname = _ref.dirname, extname = _ref.extname;

  fs = include('fs');

  ATPCore = (function() {
    function ATPCore() {}

    ATPCore.prototype.state = {
      config: {},
      statePath: null,
      opened: false,
      customCommands: {},
      defaultCommands: {
        "hello_world": {
          "description": "Prints the hello world message to the terminal output.",
          "command": ["echo Hello world :D", "echo This is", "echo example usage", "echo of the console"]
        }
      }
    };

    ATPCore.prototype.createDefaultCommandsFile = function() {
      var content, e, initialContent;
      if (atom.config.get('atom-terminal-panel.enableUserCommands')) {
        try {
          initialContent = {
            '_comment': 'Package atom-terminal-panel: This terminal-commands.json file was automatically generated by atom-terminal-package. It contains all useful config data.',
            commands: this.state.defaultCommands,
            actions: [],
            toolbar: [["clear", "clear", "Clears the console output."], ["info", "info", "Prints the terminal welcome message."], ["all available commands", "memdump", "Displays all available builtin commands. (all commands except native)"]],
            rules: {
              "\\b[A-Z][A-Z]+\\b": {
                'match': {
                  'flags': ['g']
                },
                'css': {
                  'color': 'gray'
                }
              },
              '(error|err):? (.*)': {
                'match': {
                  'matchLine': true,
                  'replace': '%(label:error:text:Error) %(0)'
                },
                'css': {
                  'color': 'red',
                  'font-weight': 'bold'
                }
              },
              '(warning|warn|alert):? (.*)': {
                'match': {
                  'matchLine': true,
                  'replace': '%(label:warning:text:Warning) %(0)'
                },
                'css': {
                  'color': 'yellow'
                }
              },
              '(note|info):? (.*)': {
                'match': {
                  'matchLine': true,
                  'replace': '%(label:info:text:Info) %(0)'
                },
                'css': {}
              },
              '(debug|dbg):? (.*)': {
                'match': {
                  'matchLine': true,
                  'replace': '%(label:default:text:Debug) %(0)'
                },
                'css': {
                  'color': 'gray'
                }
              }
            }
          };
          content = JSON.stringify(initialContent, null, '\t');
          return fs.writeFileSync(this.state.statePath, content);
        } catch (_error) {
          e = _error;
          return console.log('atp-core cannot create default terminal commands JSON file', e.message);
        }
      }
    };

    ATPCore.prototype.reload = function() {
      this.state.opended = false;
      return this.init();
    };

    ATPCore.prototype.init = function() {
      var e;
      if (!this.state.opended) {
        this.state.opened = true;
        this.state.statePath = dirname(atom.config.getUserConfigPath()) + '/terminal-commands.json';
        try {
          this.state.config = JSON.parse(fs.readFileSync(this.state.statePath));
        } catch (_error) {
          e = _error;
          console.log('atp-core cannot reload terminal config file: invalid content', e.message);
          atom.notifications.addWarning("atom-terminal-panel: Could not load the config file. The new file will be created. Reason: " + e.message);
          this.state.opened = false;
        }
        if (!this.state.opened) {
          this.createDefaultCommandsFile();
          this.state.opened = true;
          this.state.customCommands = this.state.defaultCommands;
        } else {
          this.state.customCommands = this.state.config.commands;
        }
      }
      return this;
    };

    ATPCore.prototype.jsonCssToInlineStyle = function(obj) {
      var key, ret, value;
      if (obj instanceof String) {
        return obj;
      }
      ret = '';
      for (key in obj) {
        value = obj[key];
        if ((key != null) && (value != null)) {
          ret += key + ':' + value + ';';
        }
      }
      return ret;
    };

    ATPCore.prototype.getConfig = function() {
      return this.state.config;
    };

    ATPCore.prototype.getUserCommands = function() {
      if (atom.config.get('atom-terminal-panel.enableUserCommands')) {
        return this.state.customCommands;
      }
      return null;
    };

    ATPCore.prototype.findUserCommandAction = function(cmd) {
      var code, name, _ref1;
      if (!atom.config.get('atom-terminal-panel.enableUserCommands')) {
        return null;
      }
      _ref1 = this.state.customCommands;
      for (name in _ref1) {
        code = _ref1[name];
        if (name === cmd) {
          if (code.command != null) {
            return code.command;
          }
          return code;
        }
      }
      return null;
    };

    ATPCore.prototype.findUserCommand = function(cmd) {
      var action;
      if (!atom.config.get('atom-terminal-panel.enableUserCommands')) {
        return null;
      }
      action = this.findUserCommandAction(cmd);
      if (action == null) {
        return null;
      }
      return function(state, args) {
        return state.execDelayedCommand(1, action, args, state);
      };
    };

    return ATPCore;

  })();

  module.exports = new ATPCore().init();

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvYWxpc2FsZWVtaC8uYXRvbS9wYWNrYWdlcy9hdG9tLXRlcm1pbmFsLXBhbmVsL2xpYi9hdHAtY29yZS5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBOzs7Ozs7O0dBQUE7QUFBQTtBQUFBO0FBQUEsTUFBQSw0Q0FBQTs7QUFBQSxFQVNBLE9BQThCLE9BQUEsQ0FBUSxNQUFSLENBQTlCLEVBQUMsZUFBQSxPQUFELEVBQVUsZUFBQSxPQUFWLEVBQW1CLGVBQUEsT0FUbkIsQ0FBQTs7QUFBQSxFQVVBLEVBQUEsR0FBSyxPQUFBLENBQVEsSUFBUixDQVZMLENBQUE7O0FBQUEsRUFZTTt5QkFFSjs7QUFBQSxzQkFBQSxLQUFBLEdBQ0U7QUFBQSxNQUFBLE1BQUEsRUFBUSxFQUFSO0FBQUEsTUFDQSxTQUFBLEVBQVcsSUFEWDtBQUFBLE1BRUEsTUFBQSxFQUFRLEtBRlI7QUFBQSxNQUdBLGNBQUEsRUFBZ0IsRUFIaEI7QUFBQSxNQUlBLGVBQUEsRUFDRTtBQUFBLFFBQUEsYUFBQSxFQUFlO0FBQUEsVUFDYixhQUFBLEVBQWUsd0RBREY7QUFBQSxVQUViLFNBQUEsRUFBVyxDQUNULHFCQURTLEVBRVQsY0FGUyxFQUdULG9CQUhTLEVBSVQscUJBSlMsQ0FGRTtTQUFmO09BTEY7S0FERixDQUFBOztBQUFBLHNCQWdCQSx5QkFBQSxHQUEyQixTQUFBLEdBQUE7QUFDekIsVUFBQSwwQkFBQTtBQUFBLE1BQUEsSUFBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQVosQ0FBZ0Isd0NBQWhCLENBQUg7QUFDRTtBQUNFLFVBQUEsY0FBQSxHQUFpQjtBQUFBLFlBQ2YsVUFBQSxFQUFZLHlKQURHO0FBQUEsWUFFZixRQUFBLEVBQVUsSUFBQyxDQUFBLEtBQUssQ0FBQyxlQUZGO0FBQUEsWUFHZixPQUFBLEVBQVMsRUFITTtBQUFBLFlBSWYs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

//# sourceURL=/home/alisaleemh/.atom/packages/atom-terminal-panel/lib/atp-core.coffee
